using System.Diagnostics.CodeAnalysis;
using System.Text.Encodings.Web;
using System.Text.Json;

using Adeotek.Extensions.ConfigFiles;
using Adeotek.Extensions.Docker.Config;

using YamlDotNet.Serialization;
using YamlDotNet.Serialization.NamingConventions;

namespace Adeotek.Extensions.Docker;

[ExcludeFromCodeCoverage]
public static class DockerConfigManagerV1
{
    public static ContainerConfigV1 LoadContainerConfig(string? configFile) => 
        ConfigManager.LoadConfig<ContainerConfigV1>(configFile);
    
    public static string GetSerializedSampleConfig(string format)
    {
        try
        {
            if (format == "json")
            {
                return JsonSerializer.Serialize(GetSampleConfig(), new JsonSerializerOptions
                    {
                        WriteIndented = true, 
                        Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping
                    });
            }
            
            return new SerializerBuilder()
                .WithNamingConvention(PascalCaseNamingConvention.Instance)
                .WithQuotingNecessaryStrings()
                .EnsureRoundtrip()
                .Build()
                .Serialize(GetSampleConfig());
        }
        catch (Exception e)
        {
            throw new ConfigFileException("Config data is not in a valid YAML format", null, e);
        }
    }

    public static ContainerConfigV1 GetSampleConfig() => new()
        {
            Image = "<image-name>",
            Tag = "<image-tag>",
            NamePrefix = "<optional-container-name-prefix>",
            Name = "<base-container-name>",
            CurrentSuffix = "<optional-container-name-suffix>",
            PreviousSuffix = "<optional-demoted-container-name-suffix>",
            Ports = new PortMappingV1[]
            {
                new() { Host = 8080, Container = 80 }, 
                new() { Host = 8443, Container = 443 }
            },
            Volumes = new VolumeConfigV1[]
            {
                new()
                {
                    Source = "/path/on/host/data",
                    Destination = "/path/in/container/data",
                    IsBind = true,
                    AutoCreate = false
                },
                new()
                {
                    Source = "<docker-volume-name>",
                    Destination = "/path/in/container/data",
                    IsBind = false,
                    AutoCreate = true
                }
            },
            EnvVars = new Dictionary<string, string>
            {
                { "TZ", "UTC" }, 
                { "DEBUG_MODE", "true" }
            },
            Network = new NetworkConfigV1
            {
                Name = "<docker-network-name>",
                Subnet = "172.17.0.1/24",
                IpRange = "172.17.0.1/26",
                IpAddress = "172.17.0.2",
                Hostname = "optional-hostname-or-null-for-autogenerated",
                Alias = "optional-hostname-alias-or-null-for-autogenerated",
                IsShared = false
            },
            ExtraHosts = new Dictionary<string, string>
            {
                { "host.docker.internal", "host-gateway" }, 
                { "some.other.docker.container", "172.17.0.11" }
            },
            Restart = "<optional-restart-mode (default: unless-stopped)>",
            Command = "<container-startup-command>",
            CommandArgs = new []
            {
                "--some-arg=123",
                "--flag-arg"
            },
            RunCommandOptions = new []
            {
                "-it",
                "<any-docker-run-option>"
            }
        };
}